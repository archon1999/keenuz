# Generated by Django 4.2.9 on 2024-09-21 07:46

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', ckeditor.fields.RichTextField()),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_limit', models.PositiveIntegerField(blank=True, default=1000, null=True)),
                ('memory_limit', models.PositiveIntegerField(blank=True, default=256, null=True)),
                ('title', models.CharField(max_length=255)),
                ('title_uz', models.CharField(max_length=255, null=True)),
                ('title_en', models.CharField(max_length=255, null=True)),
                ('title_ru', models.CharField(max_length=255, null=True)),
                ('body', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('body_uz', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('body_en', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('body_ru', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('input_data', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('input_data_uz', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('input_data_en', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('input_data_ru', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('output_data', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('output_data_uz', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('output_data_en', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('output_data_ru', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('comment', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('comment_uz', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('comment_en', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('comment_ru', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('difficulty', models.IntegerField(choices=[(1, 'Easy'), (2, 'Medium'), (3, 'Hard')])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(default=207, on_delete=django.db.models.deletion.CASCADE, related_name='problems', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProblemSampleTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input', models.TextField()),
                ('output', models.TextField(blank=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sample_tests', to='problems.problem')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ProblemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.category')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='problems.problem')),
            ],
        ),
        migrations.CreateModel(
            name='Attempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verdict', models.IntegerField(choices=[(-2, 'In Queue'), (-1, 'Running'), (0, 'Judgement Failed'), (1, 'Accepted'), (2, 'Wrong Answer'), (3, 'Time Limit Exceeded'), (4, 'Runtime Error'), (5, 'Output Format Error'), (6, 'Memory Limit Exceeded'), (7, 'Rejected'), (8, 'Compilation Error'), (10, 'Syntax Error')], default=-2)),
                ('lang', models.CharField(choices=[('py', 'Python 3.12'), ('cpp', 'C++ 23'), ('r', 'R Lang 4.1'), ('hs', 'Haskell 8'), ('kt', 'Kotlin 1.8'), ('c', 'C11'), ('php', 'PHP 8.1'), ('cs', 'C# 11'), ('js', 'NodeJS 21'), ('java', 'Java 19'), ('rs', 'Rust 1.71'), ('sql', 'SQL'), ('html', 'HTML 5'), ('bash', 'Bash'), ('text', 'Text'), ('go', 'Go 1.18')], max_length=10)),
                ('test_case_number', models.IntegerField(default=0, null=True)),
                ('time', models.PositiveIntegerField(default=0)),
                ('memory', models.PositiveIntegerField(default=0)),
                ('source_code', models.TextField(blank=True, default='')),
                ('error_message', models.TextField(blank=True, default='')),
                ('balls', models.FloatField(blank=True, null=True)),
                ('temp', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='problems.problem')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='ProblemAvailableLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lang', models.CharField(choices=[('py', 'Python 3.12'), ('cpp', 'C++ 23'), ('r', 'R Lang 4.1'), ('hs', 'Haskell 8'), ('kt', 'Kotlin 1.8'), ('c', 'C11'), ('php', 'PHP 8.1'), ('cs', 'C# 11'), ('js', 'NodeJS 21'), ('java', 'Java 19'), ('rs', 'Rust 1.71'), ('sql', 'SQL'), ('html', 'HTML 5'), ('bash', 'Bash'), ('text', 'Text'), ('go', 'Go 1.18')], max_length=10)),
                ('time_limit', models.IntegerField(blank=True, null=True)),
                ('memory_limit', models.IntegerField(blank=True, null=True)),
                ('code_template', models.TextField(blank=True, null=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='available_languages', to='problems.problem')),
            ],
            options={
                'unique_together': {('problem', 'lang')},
            },
        ),
    ]
